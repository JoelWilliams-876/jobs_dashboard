# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14AT7Hey6q40BVj6aZ-XcH178wJgVubxn
"""

import requests
import pandas as pd
import plotly.express as px
from bs4 import BeautifulSoup
import streamlit as st
from apscheduler.schedulers.background import BackgroundScheduler as bs
from datetime import datetime
import holidays

# Function to fetch and parse U-3 and U-6 unemployment data
def fetch_unemployment_data():
    url = "https://www.bls.gov/news.release/empsit.t15.htm"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find("table", {"class": "regular"})

    if table:
        rows = table.find_all("tr")
        data = []

        # Extract U-3 and U-6 unemployment rates
        for row in rows:
            cols = row.find_all("td")
            if len(cols) >= 3:
                try:
                    period = cols[0].text.strip()
                    u3_rate = float(cols[1].text.strip())
                    u6_rate = float(cols[2].text.strip())
                    date = datetime.strptime(period, "%b %Y")
                    data.append({
                        "date": date,
                        "U-3": u3_rate,
                        "U-6": u6_rate
                    })
                except ValueError:
                    continue

        df = pd.DataFrame(data)
        return df
    else:
        print("Unemployment data table not found.")
        return pd.DataFrame()

# Main Streamlit app
st.title("BLS Jobs and Unemployment Data")

if 'df' not in st.session_state:
    st.session_state.df = fetch_bls_table_data()  # Employment data
    st.session_state.unemployment_df = fetch_unemployment_data()  # U-3 and U-6 data

# Start APScheduler in the background
if 'scheduler' not in st.session_state:
    scheduler = bs()
    scheduler.add_job(fetch_and_update_data, 'cron', day='1-7', hour=9, minute=0)
    scheduler.start()
    st.session_state.scheduler = scheduler

# Display the unemployment graph overlay
if not st.session_state.unemployment_df.empty:
    unemployment_df = st.session_state.unemployment_df
    unemployment_type = st.radio("Select Unemployment Rate:", ["U-3", "U-6"])

    selected_data = unemployment_df[["date", unemployment_type]].rename(columns={unemployment_type: "rate"})
    fig_unemployment = px.line(
        selected_data,
        x="date",
        y="rate",
        title=f"{unemployment_type} Unemployment Rate",
        labels={"date": "Date", "rate": f"{unemployment_type} Unemployment Rate (%)"},
        template="plotly_dark"
    )
    st.plotly_chart(fig_unemployment)

# Display the employment data graph
if not st.session_state.df.empty:
    data_type = st.selectbox(
        "Select Data Slice:",
        ["Actual Employment", "Percentage Change (Month over Month)", "Percentage Change (Year over Year)"]
    )

    if data_type == "Actual Employment":
        fig_employment = px.line(
            st.session_state.df,
            x="date",
            y="actual",
            title="Civilian Labor Force",
            labels={"date": "Date", "actual": "Actual Employment"},
            template="plotly_dark"
        )
    else:
        comparison_type = "MoM" if "Month" in data_type else "YoY"
        df, title = calculate_percentage_change(st.session_state.df, comparison_type)
        fig_employment = px.line(
            df,
            x="date",
            y="change",
            title=title,
            labels={"date": "Date", "change": "% Change"},
            template="plotly_dark"
        )
    st.plotly_chart(fig_employment)
else:
    st.error("No employment data available. Please check the data source.")